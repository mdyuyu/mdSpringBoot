<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>mdSpringBoot</artifactId>
  <packaging>pom</packaging>
  <version>${revision}</version>

    <modules>
        <module>mdBase</module>
        <module>mdMicroServices</module>
    </modules>

    <name>mdSpringBoot</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>

    <!--所有项目的版本号-->
    <revision>1.0-SNAPSHOT.boot</revision>
    <!--项目引用的版本号-->
    <projectVersion>1.0-SNAPSHOT.boot</projectVersion>

  </properties>


  <!--不适用父子依赖 仅仅使用依赖管理的原因是:没必要强制项目必须有某几个依赖。
      而且纯正的公共依赖也不是很多
  -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <!-- Import dependency management from Spring Boot :好处是:可以用parent继承我们自己定义的parent-->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>2.2.2.RELEASE</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

<dependencies>
  <dependency>
    <groupId>com.alibaba</groupId>
    <artifactId>fastjson</artifactId>
    <version>1.2.83</version>
  </dependency>

  <dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.16.20</version>
  </dependency>
</dependencies>

<!--配置激活的配置文件-->
<!-- 针对本地工程:可以借助ieda强制指定待激活的配置-->
<profiles>
  <profile>
    <id>dev</id>
    <properties>
        <profileActive>dev</profileActive>
    </properties>
    <activation>
        <activeByDefault>true</activeByDefault>
    </activation>
  </profile>

  <profile>
    <id>test</id>
    <properties>
      <profileActive>test</profileActive>
    </properties>
    <activation>
      <activeByDefault>false</activeByDefault>
    </activation>
  </profile>

  <profile>
    <id>prod</id>
    <properties>
        <profileActive>prod</profileActive>
    </properties>
    <activation>
        <activeByDefault>false</activeByDefault>
    </activation>
  </profile>
</profiles>


  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <!--此行配置必须保留-->
        <filtering>true</filtering>
        <!--includes保证了只会打包激活的配置文件。而不会打包所有的配置文件-->
        <includes>
          <include>application.properties</include>
          <include>application-${profileActive}.properties</include>
          <include>**/*.xml</include>
          <include>**/*.jce</include>
        </includes>
      </resource>
    </resources>



    <!--pluginManagement
        作用在于规定版本;子项目不会引人。
        所以:对于所有项目都需要使用的spring-boot-maven-plugin
        需要在根项目显示引用
    -->
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <executions>
            <execution>
              <goals>
                <goal>repackage</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--显示规定所有子项目使用此插件
        最基础作用:1 重构重新打包,生成可执行jar.
                  2 允许打包本地jar
    -->
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <includeSystemScope>true</includeSystemScope>
        </configuration>
      </plugin>
    </plugins>

  </build>
</project>
